{"componentChunkName":"component---src-templates-post-js","path":"/adding-formspree-to-gatsby","result":{"data":{"markdownRemark":{"html":"<p>There are plenty of options when it comes to <a href=\"https://www.gatsbyjs.org/docs/building-a-contact-form/\" target=\"_blank\" rel=\"noopener nofollow\">contact forms on Gatsby</a>, and after trying several I settled on <a href=\"https://formspree.io/\" target=\"_blank\" rel=\"noopener nofollow\">Formspree</a> for the following reasons:</p>\n<ol>\n<li>It's simple</li>\n<li>Their free-tier plan is generous</li>\n<li>And form submissions end up in my inbox</li>\n</ol>\n<p>And when I say their free plan is generous, I mean you get <em>unlimited forms</em>, and <em>50 form submissions per form per month</em>. Those are some great features for a free plan, especially considering other services generally only offer a trial period, or the free form submissions count against a total and do not reset each month.</p>\n<p>So now that I settled on my form service provider, it was time to get implementing.</p>\n<p>I started by following the implementation documentation on <a href=\"https://www.gatsbyjs.org/docs/building-a-contact-form/\" target=\"_blank\" rel=\"noopener nofollow\">GatsbyJS.org</a>. I set up my form in Formspree, adjusted the settings and removed reCAPTCHA. Then I started building out my <code>contactForm</code> in Gatsby:</p>\n<p><strong>contactForm.js</strong></p>\n<pre><code class=\"language-javascript\">const ContactForm = () => {\n  return (\n    &#x3C;form action=\"https://formspree.io/myendpoint\" method=\"POST\">\n      &#x3C;label for=\"name\">Name\n        &#x3C;input type=\"text\" name=\"name\" />\n      &#x3C;/label>\n      &#x3C;label for=\"email\">Email\n        &#x3C;input type=\"email\" name=\"email\" />\n      &#x3C;/label>\n      &#x3C;label for=\"message\">Message\n        &#x3C;textarea name=\"message\" />\n      &#x3C;/label>\n      &#x3C;button type=\"submit\">Send&#x3C;/button>\n    &#x3C;/form>\n  )\n}\n\nexport default ContactForm\n</code></pre>\n<p>Simple enough.</p>\n<p>Then I decided to add a little more. And when you create a form in Formspree, there is a great example React snippet which includes using State to show a <em>thank you</em> message on successful form submit. The React snippet looks like this:</p>\n<pre><code class=\"language-javascript\">import React from \"react\";\n\nexport default class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.submitForm = this.submitForm.bind(this);\n    this.state = {\n      status: \"\"\n    };\n  }\n\n  render() {\n    const { status } = this.state;\n    return (\n      &#x3C;form\n        onSubmit={this.submitForm}\n        action=\"https://formspree.io/myendpoint\"\n        method=\"POST\"\n      >\n        &#x3C;!-- add your custom form HTML here -->\n        &#x3C;label>Name:&#x3C;/label>\n        &#x3C;input type=\"text\" name=\"name\" />\n        &#x3C;label>Email:&#x3C;/label>\n        &#x3C;input type=\"email\" name=\"email\" />\n        &#x3C;label>Message:&#x3C;/label>\n        &#x3C;input type=\"text\" name=\"message\" />\n        {status === \"SUCCESS\" ? &#x3C;p>Thanks!&#x3C;/p> : &#x3C;button>Submit&#x3C;/button>}\n        {status === \"ERROR\" &#x26;&#x26; &#x3C;p>Ooops! There was an error.&#x3C;/p>}\n      &#x3C;/form>\n    );\n  }\n\n  submitForm(ev) {\n    ev.preventDefault();\n    const form = ev.target;\n    const data = new FormData(form);\n    const xhr = new XMLHttpRequest();\n    xhr.open(form.method, form.action);\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== XMLHttpRequest.DONE) return;\n      if (xhr.status === 200) {\n        form.reset();\n        this.setState({ status: \"SUCCESS\" });\n      } else {\n        this.setState({ status: \"ERROR\" });\n      }\n    };\n    xhr.send(data);\n  }\n}\n</code></pre>\n<p>As you can see from the example, we would use a <code>submitForm()</code> function to handle our submission and set the State. We then use this State in our <code>render()</code> function to show either the submit button, or a custom message on success or error.</p>\n<p>I like this example and decided to use it for my own form. However I didn't feel it was <em>Gatsby</em> enough, so I made a few changes. I'll break down all my changes below, but here is what the final component looks like:</p>\n<p><strong>contactForm.js</strong></p>\n<pre><code class=\"language-javascript\">import React, { useState } from \"react\"\nimport styled from 'styled-components'\n\nconst HiddenInput = styled.input`\n  height: 0;\n  position: absolute;\n  visibility: hidden;\n  width: 0;\n`\n\nconst ContactForm = ({ className }) => {\n  const [status, setStatus] = useState()\n  const action = process.env.GATSBY_FORMSPREE_ENDPOINT\n\n  function submitForm(ev) {\n    ev.preventDefault()\n    const form = ev.target\n    const data = new FormData(form)\n    const xhr = new XMLHttpRequest()\n    xhr.open(form.method, form.action)\n    xhr.setRequestHeader(\"Accept\", \"application/json\")\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== XMLHttpRequest.DONE) return\n      if (xhr.status === 200) {\n        form.reset()\n        setStatus(\"SUCCESS\")\n      } else {\n        setStatus(\"ERROR\")\n      }\n    }\n    xhr.send(data)\n  }\n\n  return (\n    &#x3C;form\n      onSubmit={submitForm}\n      action={action}\n      method=\"POST\"\n      className={`${className || ''}`}\n    >\n      &#x3C;label for=\"name\">Name\n        &#x3C;input type=\"text\" name=\"name\" />\n      &#x3C;/label>\n      &#x3C;label for=\"email\">Email\n        &#x3C;input type=\"email\" name=\"email\" />\n      &#x3C;/label>\n      &#x3C;label for=\"message\">Message\n        &#x3C;textarea name=\"message\" />\n      &#x3C;/label>\n      &#x3C;HiddenInput type=\"text\" name=\"_gotcha\"/>\n      {status === \"SUCCESS\" ? &#x3C;p>Thanks!&#x3C;/p> : &#x3C;button>Submit&#x3C;/button>}\n      {status === \"ERROR\" &#x26;&#x26; &#x3C;p>Ooops! There was an error.&#x3C;/p>}\n    &#x3C;/form>\n  )\n}\n\nexport default ContactForm\n</code></pre>\n<p>First off, I wanted to add a honeypot since we removed reCAPTCHA. So following <a href=\"https://help.formspree.io/hc/en-us/articles/360013580813-Honeypot-spam-filtering\" target=\"_blank\" rel=\"noopener nofollow\">this article</a> I added the honeypot field:</p>\n<pre><code class=\"language-html\">&#x3C;input type=\"text\" name=\"_gotcha\" style=\"display:none\" />\n</code></pre>\n<p>But I'm no fan of inline CSS, especially on reusable components, so I used <code>styled-components</code> to create a new custom component for the honeypot field and styled it accordingly:</p>\n<pre><code class=\"language-javascript\">const HiddenInput = styled.input`\n  height: 0;\n  position: absolute;\n  visibility: hidden;\n  width: 0;\n`\n</code></pre>\n<pre><code class=\"language-html\">&#x3C;HiddenInput type=\"text\" name=\"_gotcha\"/>\n</code></pre>\n<p>Then I moved the form action out of the component and into environment variables. This allows me to use different forms for different environments and keep my data pure. To achieve this I added the following to the <code>contactForm.js</code> component:</p>\n<pre><code class=\"language-javascript\">const action = process.env.GATSBY_FORMSPREE_ENDPOINT\n</code></pre>\n<p>And I added the endpoint variable to <code>.env.production</code> like so:</p>\n<pre><code class=\"language-text\">GATSBY_FORMSPREE_ENDPOINT=https://formspree.io/myendpoint\n</code></pre>\n<p>I also added endpoint variables to <code>.env.development</code> and <code>.env.gh-pages</code> since I am running my site on GitHub Pages.</p>\n<p>Lastly, I update how functions and State are handled and rewrote everything inside a single constant getting the final code above.</p>\n<p>Example State changes:</p>\n<pre><code class=\"language-javascript\">const [status, setStatus] = useState()\n</code></pre>\n<p>Oh, and I also added the <code>{ className }</code> prop to the component so that I can use custom styling and <code>styled-components</code> when calling my <code>contactForm.js</code> component. This way I can reuse the form component, and style it any way I want without having to overwrite existing CSS.</p>\n<p>And that's it. Now I have a fully functional contact form at <a href=\"https://monkishtypist.com/contact\" target=\"_blank\" rel=\"noopener nofollow\">https://monkishtypist.com/contact</a> that sends me an email with the form data every time the form is submitted.</p>\n<p>Couldn't be any easier.</p>","frontmatter":{"date":"January 07, 2020","slug":"adding-formspree-to-gatsby","title":"Adding Formspree Forms to Gatsby"}}},"pageContext":{"slug":"adding-formspree-to-gatsby"}}}